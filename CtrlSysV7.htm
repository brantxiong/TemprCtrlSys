<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [E:\CoursrDesign\CtrlSysV7\CtrlSysV7.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image E:\CoursrDesign\CtrlSysV7\CtrlSysV7.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 524]: Last Updated: Fri Jun 08 16:16:57 2012
<BR><P>
<H3>Maximum Stack Usage =        128 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; ReadTmp &rArr; ConvertTmp &rArr; __aeabi_dmul
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[18486d0]">Reset_Handler</a>
 <LI><a href="#[184870c]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[18486d0]">Reset_Handler</a>
 <LI><a href="#[1848568]">Undef_Handler</a>
 <LI><a href="#[18485a4]">SWI_Handler</a>
 <LI><a href="#[18485e0]">PAbt_Handler</a>
 <LI><a href="#[1848694]">DAbt_Handler</a>
 <LI><a href="#[184861c]">IRQ_Handler</a>
 <LI><a href="#[1848658]">FIQ_Handler</a>
 <LI><a href="#[1840930]">__main</a>
 <LI><a href="#[1846768]">main</a>
 <LI><a href="#[24fe9dc]">__I$use$semihosting</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[18486d0]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aduc702x.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> aduc702x.o(RESET)
</UL>
<P><STRONG><a name="[1840930]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[183ee78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[24fc510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[24fc510]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[1840930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[24fc4d4]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183ee78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[24fc498]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[24fc2f4]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24fc2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[24fc2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[24fc204]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[183cf4c]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Calls]<UL><LI><a href="#[183a9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[183de4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[183b098]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[183b110]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[183b4d0]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[183b368]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[183afa8]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[183b020]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[183b3e0]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[183b2f0]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[183b8cc]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[183b728]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[183b6b0]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[183b638]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[183b5c0]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[183b548]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[183b7dc]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[183af6c]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[183b458]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[183b278]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[183b854]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[24fddac]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[183a6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[24fca74]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[24fc894]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[24fc858]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[24fc9c0]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[24fcb28]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[24fc948]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[183ee78]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1840930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[24fc4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[183df00]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[183db7c]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[183d744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[183de4c]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[183cf4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[183de88]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[183dd98]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[183d5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[183ddd4]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[183c7cc]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[183d5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[183a6c0]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[24fddac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[183a6fc]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[183a684]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[183a8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[184870c]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aduc702x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[183d744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1848658]"></a>FIQ_Handler</STRONG> (ARM, 44 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aduc702x.o(RESET)
</UL>
<P><STRONG><a name="[18485a4]"></a>SWI_Handler</STRONG> (ARM, 44 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aduc702x.o(RESET)
</UL>
<P><STRONG><a name="[1848568]"></a>Undef_Handler</STRONG> (ARM, 44 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aduc702x.o(RESET)
</UL>
<P><STRONG><a name="[18485e0]"></a>PAbt_Handler</STRONG> (ARM, 44 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aduc702x.o(RESET)
</UL>
<P><STRONG><a name="[1848694]"></a>DAbt_Handler</STRONG> (ARM, 44 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aduc702x.o(RESET)
</UL>
<P><STRONG><a name="[1846768]"></a>main</STRONG> (ARM, 176 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = main &rArr; ReadTmp &rArr; ConvertTmp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[183f940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[184645c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_initial
<LI><a href="#[18464d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDisplay
<LI><a href="#[1846510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkInit
<LI><a href="#[184654c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTime
<LI><a href="#[1846588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialInit
<LI><a href="#[18465c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayOff
<LI><a href="#[1846600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTmp
<LI><a href="#[184663c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInit
<LI><a href="#[1846678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInit
<LI><a href="#[18466b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOInit
<LI><a href="#[18466f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
<LI><a href="#[184672c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlTmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[18466f0]"></a>Display</STRONG> (ARM, 220 bytes, Stack size 8 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Display &rArr; disp_word &rArr; write_command &rArr; check_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[1845700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_word
<LI><a href="#[18457b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_chn
</UL>
<BR>[Called By]<UL><LI><a href="#[1842af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleIR
<LI><a href="#[1846768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18464d4]"></a>UpdateDisplay</STRONG> (ARM, 952 bytes, Stack size 8 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UpdateDisplay &rArr; write_Num &rArr; disp_word &rArr; write_command &rArr; check_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[183f148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[1845598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_Num
<LI><a href="#[18455d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_BigNum
<LI><a href="#[1845700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_word
<LI><a href="#[184573c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_str
<LI><a href="#[1845778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_huge_word
<LI><a href="#[18457b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_chn
</UL>
<BR>[Called By]<UL><LI><a href="#[1846768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18466b4]"></a>IOInit</STRONG> (ARM, 40 bytes, Stack size 0 bytes, io_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1846768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1845124]"></a>BeepOn</STRONG> (ARM, 24 bytes, Stack size 0 bytes, io_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184672c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlTmp
</UL>

<P><STRONG><a name="[18450e8]"></a>BeepOff</STRONG> (ARM, 24 bytes, Stack size 0 bytes, io_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1841e48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[184672c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlTmp
</UL>

<P><STRONG><a name="[18450ac]"></a>RelayOn</STRONG> (ARM, 24 bytes, Stack size 0 bytes, io_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184672c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlTmp
</UL>

<P><STRONG><a name="[18465c4]"></a>RelayOff</STRONG> (ARM, 24 bytes, Stack size 0 bytes, io_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184672c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlTmp
<LI><a href="#[1846768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1844a58]"></a>delaynum</STRONG> (ARM, 24 bytes, Stack size 0 bytes, ocm12864.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18449a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command
<LI><a href="#[18449e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
<LI><a href="#[1844a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_busy
</UL>

<P><STRONG><a name="[1844a1c]"></a>check_busy</STRONG> (ARM, 220 bytes, Stack size 4 bytes, ocm12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = check_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[1844a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delaynum
</UL>
<BR>[Called By]<UL><LI><a href="#[18449a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command
<LI><a href="#[18449e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
</UL>

<P><STRONG><a name="[18449e0]"></a>write_data</STRONG> (ARM, 176 bytes, Stack size 8 bytes, ocm12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = write_data &rArr; check_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[1844a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_busy
<LI><a href="#[1844a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delaynum
</UL>
<BR>[Called By]<UL><LI><a href="#[1844710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shuxian
<LI><a href="#[184474c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_bmp
<LI><a href="#[1844788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;point
<LI><a href="#[18447c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpoint
<LI><a href="#[1844800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_big_word
<LI><a href="#[184483c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_huge_dot
<LI><a href="#[18448f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_screen
<LI><a href="#[1845700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_word
<LI><a href="#[1845778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_huge_word
<LI><a href="#[18457b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_chn
</UL>

<P><STRONG><a name="[18449a4]"></a>write_command</STRONG> (ARM, 176 bytes, Stack size 8 bytes, ocm12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = write_command &rArr; check_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[1844a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_busy
<LI><a href="#[1844a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delaynum
</UL>
<BR>[Called By]<UL><LI><a href="#[184474c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_bmp
<LI><a href="#[1844800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_big_word
<LI><a href="#[184483c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_huge_dot
<LI><a href="#[1844878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_colume_address
<LI><a href="#[18448b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_page_address
<LI><a href="#[18448f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_screen
<LI><a href="#[1845700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_word
<LI><a href="#[1845778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_huge_word
<LI><a href="#[18457b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_chn
<LI><a href="#[184645c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_initial
</UL>

<P><STRONG><a name="[1844968]"></a>LCD_Delay</STRONG> (ARM, 20 bytes, Stack size 0 bytes, ocm12864.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184492c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[184645c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_initial
</UL>

<P><STRONG><a name="[184492c]"></a>reset</STRONG> (ARM, 68 bytes, Stack size 4 bytes, ocm12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = reset
</UL>
<BR>[Calls]<UL><LI><a href="#[1844968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[184645c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_initial
</UL>

<P><STRONG><a name="[18448f0]"></a>clear_screen</STRONG> (ARM, 104 bytes, Stack size 16 bytes, ocm12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = clear_screen &rArr; write_command &rArr; check_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[18449a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command
<LI><a href="#[18449e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[184645c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_initial
</UL>

<P><STRONG><a name="[184645c]"></a>lcd_initial</STRONG> (ARM, 256 bytes, Stack size 4 bytes, ocm12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_initial &rArr; clear_screen &rArr; write_command &rArr; check_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[18448f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_screen
<LI><a href="#[184492c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[1844968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Delay
<LI><a href="#[18449a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command
</UL>
<BR>[Called By]<UL><LI><a href="#[1846768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18448b4]"></a>set_page_address</STRONG> (ARM, 24 bytes, Stack size 8 bytes, ocm12864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18449a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command
</UL>
<BR>[Called By]<UL><LI><a href="#[1844710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shuxian
<LI><a href="#[1844788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;point
<LI><a href="#[18447c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpoint
</UL>

<P><STRONG><a name="[1844878]"></a>set_colume_address</STRONG> (ARM, 40 bytes, Stack size 12 bytes, ocm12864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18449a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command
</UL>
<BR>[Called By]<UL><LI><a href="#[1844710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shuxian
<LI><a href="#[1844788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;point
<LI><a href="#[18447c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpoint
</UL>

<P><STRONG><a name="[1845700]"></a>disp_word</STRONG> (ARM, 216 bytes, Stack size 28 bytes, ocm12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = disp_word &rArr; write_command &rArr; check_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[18449a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command
<LI><a href="#[18449e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1843270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountTime
<LI><a href="#[1844698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_floatNum
<LI><a href="#[1845598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_Num
<LI><a href="#[184573c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_str
<LI><a href="#[18464d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDisplay
<LI><a href="#[18466f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
</UL>

<P><STRONG><a name="[1845778]"></a>disp_huge_word</STRONG> (ARM, 392 bytes, Stack size 28 bytes, ocm12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = disp_huge_word &rArr; write_command &rArr; check_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[18449a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command
<LI><a href="#[18449e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[18464d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDisplay
</UL>

<P><STRONG><a name="[184483c]"></a>disp_huge_dot</STRONG> (ARM, 384 bytes, Stack size 24 bytes, ocm12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = disp_huge_dot &rArr; write_command &rArr; check_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[18449a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command
<LI><a href="#[18449e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[18455d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_BigNum
</UL>

<P><STRONG><a name="[1844800]"></a>disp_big_word</STRONG> (ARM, 392 bytes, Stack size 28 bytes, ocm12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = disp_big_word &rArr; write_command &rArr; check_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[18449a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command
<LI><a href="#[18449e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[18455d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_BigNum
</UL>

<P><STRONG><a name="[18457b4]"></a>disp_chn</STRONG> (ARM, 212 bytes, Stack size 28 bytes, ocm12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = disp_chn &rArr; write_command &rArr; check_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[18449a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command
<LI><a href="#[18449e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1843270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountTime
<LI><a href="#[18464d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDisplay
<LI><a href="#[18466f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
</UL>

<P><STRONG><a name="[184573c]"></a>disp_str</STRONG> (ARM, 96 bytes, Stack size 16 bytes, ocm12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = disp_str &rArr; disp_word &rArr; write_command &rArr; check_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[1845700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_word
</UL>
<BR>[Called By]<UL><LI><a href="#[18464d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDisplay
</UL>

<P><STRONG><a name="[18447c4]"></a>setpoint</STRONG> (ARM, 80 bytes, Stack size 16 bytes, ocm12864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1844878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_colume_address
<LI><a href="#[18448b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_page_address
<LI><a href="#[18449e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
</UL>

<P><STRONG><a name="[1844788]"></a>point</STRONG> (ARM, 44 bytes, Stack size 12 bytes, ocm12864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1844878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_colume_address
<LI><a href="#[18448b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_page_address
<LI><a href="#[18449e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[18446d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hengxian
</UL>

<P><STRONG><a name="[184474c]"></a>disp_bmp</STRONG> (ARM, 108 bytes, Stack size 16 bytes, ocm12864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18449a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command
<LI><a href="#[18449e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
</UL>

<P><STRONG><a name="[1844710]"></a>shuxian</STRONG> (ARM, 72 bytes, Stack size 20 bytes, ocm12864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1844878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_colume_address
<LI><a href="#[18448b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_page_address
<LI><a href="#[18449e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
</UL>

<P><STRONG><a name="[18446d4]"></a>hengxian</STRONG> (ARM, 48 bytes, Stack size 12 bytes, ocm12864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1844788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;point
</UL>

<P><STRONG><a name="[18455d4]"></a>write_BigNum</STRONG> (ARM, 412 bytes, Stack size 48 bytes, ocm12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = write_BigNum &rArr; disp_big_word &rArr; write_command &rArr; check_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[183efe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[183f5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[18413bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[1844800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_big_word
<LI><a href="#[184483c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_huge_dot
</UL>
<BR>[Called By]<UL><LI><a href="#[18464d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDisplay
</UL>

<P><STRONG><a name="[1845598]"></a>write_Num</STRONG> (ARM, 360 bytes, Stack size 48 bytes, ocm12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = write_Num &rArr; disp_word &rArr; write_command &rArr; check_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[18413bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[1845700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_word
</UL>
<BR>[Called By]<UL><LI><a href="#[18464d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDisplay
</UL>

<P><STRONG><a name="[1844698]"></a>write_floatNum</STRONG> (ARM, 1568 bytes, Stack size 80 bytes, ocm12864.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183fc10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1840048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[18413bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[1845700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_word
</UL>

<P><STRONG><a name="[1846588]"></a>SerialInit</STRONG> (ARM, 52 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1846768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18440f8]"></a>PutChar</STRONG> (ARM, 80 bytes, Stack size 0 bytes, serial.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1844080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
</UL>

<P><STRONG><a name="[18440bc]"></a>GetChar</STRONG> (ARM, 36 bytes, Stack size 0 bytes, serial.o(.text), UNUSED)

<P><STRONG><a name="[1844080]"></a>Write</STRONG> (ARM, 60 bytes, Stack size 16 bytes, serial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1841614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[18440f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutChar
</UL>

<P><STRONG><a name="[1843ae0]"></a>DelayUs</STRONG> (ARM, 24 bytes, Stack size 0 bytes, temperature.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1841e48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[1842b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIR
<LI><a href="#[18439f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTmpBus
<LI><a href="#[1843a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTmpBus
<LI><a href="#[1843a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmpBusInit
<LI><a href="#[1843aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[184672c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlTmp
</UL>

<P><STRONG><a name="[1843aa4]"></a>DelayMs</STRONG> (ARM, 52 bytes, Stack size 8 bytes, temperature.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[1843ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[1842b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckKey
<LI><a href="#[1846600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTmp
<LI><a href="#[184861c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>

<P><STRONG><a name="[1846510]"></a>SysClkInit</STRONG> (ARM, 56 bytes, Stack size 0 bytes, temperature.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1846768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1843a68]"></a>TmpBusInit</STRONG> (ARM, 100 bytes, Stack size 4 bytes, temperature.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TmpBusInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1843ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[1846600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTmp
</UL>

<P><STRONG><a name="[1843a2c]"></a>ReadTmpBus</STRONG> (ARM, 124 bytes, Stack size 8 bytes, temperature.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadTmpBus
</UL>
<BR>[Calls]<UL><LI><a href="#[1843ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[1846600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTmp
</UL>

<P><STRONG><a name="[18439f0]"></a>WriteTmpBus</STRONG> (ARM, 128 bytes, Stack size 8 bytes, temperature.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteTmpBus
</UL>
<BR>[Calls]<UL><LI><a href="#[1843ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[1846600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTmp
</UL>

<P><STRONG><a name="[18439b4]"></a>ConvertTmp</STRONG> (ARM, 472 bytes, Stack size 88 bytes, temperature.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ConvertTmp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[183fc10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[183fd3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1840408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[18407c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[18413bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1846600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTmp
</UL>

<P><STRONG><a name="[1846600]"></a>ReadTmp</STRONG> (ARM, 148 bytes, Stack size 16 bytes, temperature.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ReadTmp &rArr; ConvertTmp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[18439b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertTmp
<LI><a href="#[18439f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTmpBus
<LI><a href="#[1843a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTmpBus
<LI><a href="#[1843a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmpBusInit
<LI><a href="#[1843aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[1846768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[184654c]"></a>StartTime</STRONG> (ARM, 40 bytes, Stack size 0 bytes, time.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1846768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[184861c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>

<P><STRONG><a name="[18432ac]"></a>PauseTime</STRONG> (ARM, 24 bytes, Stack size 0 bytes, time.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184861c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>

<P><STRONG><a name="[1843270]"></a>CountTime</STRONG> (ARM, 560 bytes, Stack size 8 bytes, time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CountTime &rArr; disp_word &rArr; write_command &rArr; check_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[1845700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_word
<LI><a href="#[18457b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_chn
</UL>
<BR>[Called By]<UL><LI><a href="#[184861c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>

<P><STRONG><a name="[184861c]"></a>IRQ_Handler</STRONG> (ARM, 120 bytes, Stack size 24 bytes, int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IRQ_Handler &rArr; HandleIR &rArr; Display &rArr; disp_word &rArr; write_command &rArr; check_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[1842af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleIR
<LI><a href="#[1842b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckKey
<LI><a href="#[1842b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIR
<LI><a href="#[1843270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountTime
<LI><a href="#[18432ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PauseTime
<LI><a href="#[1843aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[184654c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aduc702x.o(RESET)
</UL>
<P><STRONG><a name="[184663c]"></a>KeyInit</STRONG> (ARM, 92 bytes, Stack size 0 bytes, key.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1846768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18425c8]"></a>AckKey</STRONG> (ARM, 40 bytes, Stack size 0 bytes, key.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1842af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleIR
<LI><a href="#[1842b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckKey
</UL>

<P><STRONG><a name="[184258c]"></a>DecKey</STRONG> (ARM, 124 bytes, Stack size 0 bytes, key.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1842af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleIR
<LI><a href="#[1842b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckKey
</UL>

<P><STRONG><a name="[1842550]"></a>AddKey</STRONG> (ARM, 124 bytes, Stack size 0 bytes, key.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1842af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleIR
<LI><a href="#[1842b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckKey
</UL>

<P><STRONG><a name="[1842514]"></a>SwitchKey</STRONG> (ARM, 60 bytes, Stack size 0 bytes, key.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1842b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckKey
</UL>

<P><STRONG><a name="[1842b2c]"></a>CheckKey</STRONG> (ARM, 116 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CheckKey &rArr; DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[1842514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchKey
<LI><a href="#[1842550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddKey
<LI><a href="#[184258c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecKey
<LI><a href="#[18425c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckKey
<LI><a href="#[1843aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[184861c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>

<P><STRONG><a name="[1846678]"></a>IRInit</STRONG> (ARM, 60 bytes, Stack size 0 bytes, ir.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1846768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1841e48]"></a>beep</STRONG> (ARM, 68 bytes, Stack size 8 bytes, ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = beep
</UL>
<BR>[Calls]<UL><LI><a href="#[1843ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
<LI><a href="#[18450e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeepOff
</UL>
<BR>[Called By]<UL><LI><a href="#[1842b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIR
</UL>

<P><STRONG><a name="[1842b68]"></a>CheckIR</STRONG> (ARM, 836 bytes, Stack size 24 bytes, ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CheckIR &rArr; beep
</UL>
<BR>[Calls]<UL><LI><a href="#[1841e48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[1843ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[184861c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>

<P><STRONG><a name="[1841e0c]"></a>SetNum</STRONG> (ARM, 388 bytes, Stack size 16 bytes, ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetNum &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18413bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1842af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleIR
</UL>

<P><STRONG><a name="[1842af0]"></a>HandleIR</STRONG> (ARM, 372 bytes, Stack size 8 bytes, ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HandleIR &rArr; Display &rArr; disp_word &rArr; write_command &rArr; check_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[1841e0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNum
<LI><a href="#[1842550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddKey
<LI><a href="#[184258c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecKey
<LI><a href="#[18425c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckKey
<LI><a href="#[18466f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
</UL>
<BR>[Called By]<UL><LI><a href="#[184861c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>

<P><STRONG><a name="[1841920]"></a>PIDCalc</STRONG> (ARM, 140 bytes, Stack size 32 bytes, pid_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PIDCalc
</UL>
<BR>[Calls]<UL><LI><a href="#[183efe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[183f328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[183f5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[183f814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[183f940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[184672c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlTmp
</UL>

<P><STRONG><a name="[184672c]"></a>ControlTmp</STRONG> (ARM, 72 bytes, Stack size 8 bytes, pid_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ControlTmp &rArr; PIDCalc
</UL>
<BR>[Calls]<UL><LI><a href="#[183f148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[1841920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDCalc
<LI><a href="#[1843ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
<LI><a href="#[18450ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayOn
<LI><a href="#[18450e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeepOff
<LI><a href="#[1845124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeepOn
<LI><a href="#[18465c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayOff
</UL>
<BR>[Called By]<UL><LI><a href="#[1846768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1841614]"></a>strlen</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, strlen.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1844080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write (via Veneer)
</UL>

<P><STRONG><a name="[18413f8]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[18413bc]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1841e0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNum
<LI><a href="#[18439b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertTmp
<LI><a href="#[1844698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_floatNum
<LI><a href="#[1845598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_Num
<LI><a href="#[18455d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_BigNum
</UL>

<P><STRONG><a name="[1840a98]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1840a5c]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1840a20]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[183d744]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[183c8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[184870c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[183db7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[183d5dc]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[183c7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
<LI><a href="#[183d564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[183dd98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[183c8f8]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[183c8bc]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[183d744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[183c880]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[183a8dc]"></a>_sys_exit</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[183a684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[24fe9dc]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_exit.o(.text)
</UL>
<P><STRONG><a name="[24fe9a0]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[18407c8]"></a>__aeabi_d2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Called By]<UL><LI><a href="#[18439b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertTmp
</UL>

<P><STRONG><a name="[184078c]"></a>_d2f</STRONG> (ARM, 168 bytes, Stack size 0 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183e8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
<LI><a href="#[1840660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL>

<P><STRONG><a name="[1840750]"></a>__fpl_inf_d2f</STRONG> (ARM, 0 bytes, Stack size unknown bytes, d2f.o(x$fpl$d2f), UNUSED)

<P><STRONG><a name="[1840408]"></a>__aeabi_dadd</STRONG> (ARM, 0 bytes, Stack size 8 bytes, daddsub_noclz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[18439b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertTmp
</UL>

<P><STRONG><a name="[18403cc]"></a>_dadd</STRONG> (ARM, 452 bytes, Stack size 8 bytes, daddsub_noclz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183ea04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[1840444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[1840660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL>

<P><STRONG><a name="[1840390]"></a>__fpl_inf_dadd</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub_noclz.o(x$fpl$dadd), UNUSED)

<P><STRONG><a name="[183ea04]"></a>__fpl_dcheck_NaN2</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dcheck.o(x$fpl$dcheck), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183d924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[183fbd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[18402a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[18403cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[183e8d8]"></a>__fpl_dcheck_NaN1</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183d924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[184000c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[184078c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[183e4dc]"></a>__fpl_fcmp_InfNaN</STRONG> (ARM, 100 bytes, Stack size 0 bytes, fcmpin.o(x$fpl$dcmpinfnan), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183d834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
<LI><a href="#[183e6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[1840660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[183f10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[183e4a0]"></a>__fpl_inf_fcmp</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fcmpin.o(x$fpl$dcmpinfnan), UNUSED)

<P><STRONG><a name="[1840048]"></a>__aeabi_d2iz</STRONG> (ARM, 0 bytes, Stack size 8 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1844698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_floatNum
</UL>

<P><STRONG><a name="[184000c]"></a>_dfix</STRONG> (ARM, 172 bytes, Stack size 8 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183e8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
<LI><a href="#[1840660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL>

<P><STRONG><a name="[183ffd0]"></a>__fpl_inf_dfix</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dfix.o(x$fpl$dfix), UNUSED)

<P><STRONG><a name="[183fdf0]"></a>__aeabi_i2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[183fdb4]"></a>_dflt</STRONG> (ARM, 88 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[183fd78]"></a>__dflt_normalise</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[183fd00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfltu
</UL>

<P><STRONG><a name="[183fd3c]"></a>__aeabi_ui2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[18439b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertTmp
</UL>

<P><STRONG><a name="[183fd00]"></a>_dfltu</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dfltu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183fd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dflt_normalise
</UL>

<P><STRONG><a name="[183fc10]"></a>__aeabi_dmul</STRONG> (ARM, 0 bytes, Stack size 16 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[18439b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertTmp
<LI><a href="#[1844698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_floatNum
</UL>

<P><STRONG><a name="[183fbd4]"></a>_dmul</STRONG> (ARM, 460 bytes, Stack size 16 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183ea04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[1840660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL>

<P><STRONG><a name="[183fb98]"></a>__fpl_inf_dmul</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dmul.o(x$fpl$dmul), UNUSED)

<P><STRONG><a name="[18402dc]"></a>__aeabi_dsub</STRONG> (ARM, 0 bytes, Stack size 8 bytes, daddsub_noclz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[18402a0]"></a>_dsub</STRONG> (ARM, 572 bytes, Stack size 8 bytes, daddsub_noclz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183ea04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[1840480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[1840660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL>

<P><STRONG><a name="[1840264]"></a>__fpl_inf_dsub</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub_noclz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[183e7e8]"></a>__dunder</STRONG> (ARM, 276 bytes, Stack size 4 bytes, dunder.o(x$fpl$dunder), UNUSED)

<P><STRONG><a name="[183e7ac]"></a>__dunder_d</STRONG> (ARM, 4 bytes, Stack size 0 bytes, dunder.o(x$fpl$dunder), UNUSED)

<P><STRONG><a name="[183f940]"></a>__aeabi_fadd</STRONG> (ARM, 0 bytes, Stack size 0 bytes, faddsub_noclz.o(x$fpl$fadd))
<BR><BR>[Called By]<UL><LI><a href="#[1841920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDCalc
<LI><a href="#[1846768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[183f904]"></a>_fadd</STRONG> (ARM, 260 bytes, Stack size 0 bytes, faddsub_noclz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183e6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[183f97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[1840660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL>

<P><STRONG><a name="[183f8c8]"></a>__fpl_inf_fadd</STRONG> (ARM, 0 bytes, Stack size unknown bytes, faddsub_noclz.o(x$fpl$fadd), UNUSED)

<P><STRONG><a name="[183e6bc]"></a>__fpl_fcheck_NaN2</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fcheck.o(x$fpl$fcheck), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183d924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[183e4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
<LI><a href="#[183efa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[183f7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[183f904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[183e5cc]"></a>__fpl_fcheck_NaN1</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fcheck1.o(x$fpl$fcheck1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183d924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[183f580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
</UL>

<P><STRONG><a name="[183f5bc]"></a>__aeabi_f2iz</STRONG> (ARM, 0 bytes, Stack size 0 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Called By]<UL><LI><a href="#[1841920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDCalc
<LI><a href="#[18455d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_BigNum
</UL>

<P><STRONG><a name="[183f580]"></a>_ffix</STRONG> (ARM, 112 bytes, Stack size 0 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183e5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
<LI><a href="#[1840660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL>

<P><STRONG><a name="[183f544]"></a>__fpl_inf_ffix</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ffix.o(x$fpl$ffix), UNUSED)

<P><STRONG><a name="[183f328]"></a>__aeabi_i2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[1841920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDCalc
</UL>

<P><STRONG><a name="[183f2ec]"></a>_fflt</STRONG> (ARM, 92 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[183f2b0]"></a>__fflt_normalise</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fflt_noclz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[183f148]"></a>__aeabi_cfcmple</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Called By]<UL><LI><a href="#[18464d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDisplay
<LI><a href="#[184672c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlTmp
</UL>

<P><STRONG><a name="[183f10c]"></a>_fcmple</STRONG> (ARM, 116 bytes, Stack size 0 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183e4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[183efe0]"></a>__aeabi_fmul</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Called By]<UL><LI><a href="#[1841920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDCalc
<LI><a href="#[18455d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_BigNum
</UL>

<P><STRONG><a name="[183efa4]"></a>_fmul</STRONG> (ARM, 260 bytes, Stack size 0 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183e6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[1840660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL>

<P><STRONG><a name="[183ef68]"></a>__fpl_inf_fmul</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[183e374]"></a>__fpl_normalise2</STRONG> (ARM, 148 bytes, Stack size 0 bytes, fnorm2_noclz.o(x$fpl$fnorm2), UNUSED)

<P><STRONG><a name="[183aa08]"></a>__fplib_config_pureend_doubles</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[183a9cc]"></a>_fp_init</STRONG> (ARM, 4 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[183cf4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[183f814]"></a>__aeabi_fsub</STRONG> (ARM, 0 bytes, Stack size 0 bytes, faddsub_noclz.o(x$fpl$fsub))
<BR><BR>[Called By]<UL><LI><a href="#[1841920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDCalc
</UL>

<P><STRONG><a name="[183f7d8]"></a>_fsub</STRONG> (ARM, 356 bytes, Stack size 0 bytes, faddsub_noclz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183e6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[183f9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
<LI><a href="#[1840660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL>

<P><STRONG><a name="[183f79c]"></a>__fpl_inf_fsub</STRONG> (ARM, 0 bytes, Stack size unknown bytes, faddsub_noclz.o(x$fpl$fsub), UNUSED)

<P><STRONG><a name="[183e284]"></a>__funder</STRONG> (ARM, 144 bytes, Stack size 0 bytes, funder.o(x$fpl$funder), UNUSED)

<P><STRONG><a name="[183e248]"></a>__funder_d</STRONG> (ARM, 4 bytes, Stack size 0 bytes, funder.o(x$fpl$funder), UNUSED)

<P><STRONG><a name="[183d924]"></a>__fpl_return_NaN</STRONG> (ARM, 116 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183d834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[183e5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
<LI><a href="#[183e6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[183e8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
<LI><a href="#[183ea04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[183d834]"></a>__fpl_cmpreturn</STRONG> (ARM, 60 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[183d924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
<LI><a href="#[183e4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[183e194]"></a>__I$use$fp</STRONG> (ARM, 0 bytes, Stack size unknown bytes, usenofp.o(x$fpl$usenofp), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1840480]"></a>_dadd1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub_noclz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18402a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[1840444]"></a>_dsub1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub_noclz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18403cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[183f9b8]"></a>_fadd1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, faddsub_noclz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[183f7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[183f97c]"></a>_fsub1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, faddsub_noclz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[183f904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[1840660]"></a>__fpl_infinity</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[183e4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
<LI><a href="#[183efa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[183f580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[183f7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[183f904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[183fbd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[184000c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[18402a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[18403cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[184078c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[183d564]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[183d5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
